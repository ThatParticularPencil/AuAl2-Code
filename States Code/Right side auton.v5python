{"mode":"Text","hardwareTarget":"brain","textContent":"#region VEXcode Generated Robot Configuration\nfrom vex import *\nimport urandom\n\n# Brain should be defined by default\nbrain=Brain()\n\n# Robot configuration code save\nMAX_DV = 96\nMAX_TV = 80\nTURN_SENS = .4\nalpha3 = .98\ncontroller_1 = Controller(PRIMARY)\nintake = Motor(Ports.PORT2, GearSetting.RATIO_18_1, False)\nMogo = DigitalOut(brain.three_wire_port.a)\ndoinker = DigitalOut(brain.three_wire_port.b)\nWall = Motor(Ports.PORT1, GearSetting.RATIO_18_1, False)\nL3 = Motor(Ports.PORT18, GearSetting.RATIO_6_1, True)\nR3 = Motor(Ports.PORT8, GearSetting.RATIO_6_1, False)\nleft_motor_a = Motor(Ports.PORT20, GearSetting.RATIO_6_1, True)\nleft_motor_b = Motor(Ports.PORT19, GearSetting.RATIO_6_1, False)\nleft_drive_smart = MotorGroup(left_motor_a, left_motor_b,L3)\nright_motor_a = Motor(Ports.PORT10, GearSetting.RATIO_6_1, False)\nright_motor_b = Motor(Ports.PORT9, GearSetting.RATIO_6_1, True)\nright_drive_smart = MotorGroup(right_motor_a, right_motor_b,R3)\ndrivetrain = DriveTrain(left_drive_smart, right_drive_smart, 299.24, 295, 40, MM, 0.6)\n\n\n# wait for rotation sensor to fully initialize\nwait(30, MSEC)\n\n\n# Make random actually random\ndef initializeRandomSeed():\n    wait(100, MSEC)\n    random = brain.battery.voltage(MV) + brain.battery.current(CurrentUnits.AMP) * 100 + brain.timer.system_high_res()\n    urandom.seed(int(random))\n      \n# Set random seed \ninitializeRandomSeed()\n\n\ndef play_vexcode_sound(sound_name):\n    # Helper to make playing sounds from the V5 in VEXcode easier and\n    # keeps the code cleaner by making it clear what is happening.\n    print(\"VEXPlaySound:\" + sound_name)\n    wait(5, MSEC)\n\n# add a small delay to make sure we don't print in the middle of the REPL header\nwait(100, MSEC)\n# clear the console to make sure we don't have the REPL in the console\nprint(\"\\033[2J\")\n\n\n\n# define variables used for controlling motors based on controller inputs\ndrivetrain_l_needs_to_be_stopped_controller_1 = False\ndrivetrain_r_needs_to_be_stopped_controller_1 = False\n\ndef low_pass_filter(vprev, value, alpha):\n    return alpha*vprev +(1-alpha)*value\n\n\n# define a task that will handle monitoring inputs from controller_1\ndef rc_auto_loop_function_controller_1():\n    axis_3 = 0 \n    global drivetrain_l_needs_to_be_stopped_controller_1, drivetrain_r_needs_to_be_stopped_controller_1, remote_control_code_enabled\n    # process the controller input every 20 milliseconds\n    # update the motors based on the input values\n    while True:\n        global alpha3,TURN_SENS\n        #accel limiter by average:\n        axis_3 = low_pass_filter(axis_3, controller_1.axis3.position(), alpha3)\n\n        if remote_control_code_enabled:\n\n            # calculate the drivetrain motor velocities from the controller joystick axies\n            # left = axis3 + axis1\n            # right = axis3 - axis1\n            DL = axis_3+(controller_1.axis1.position()*TURN_SENS)\n            DR = axis_3-(controller_1.axis1.position()*TURN_SENS)\n\n            drivetrain_left_side_speed = max(min(DL, MAX_DV),-MAX_DV)\n            drivetrain_right_side_speed = max(min(DR, MAX_DV),-MAX_DV)\n            \n            # check if the value is inside of the deadband range\n            if drivetrain_left_side_speed < 5 and drivetrain_left_side_speed > -5:\n                # check if the left motor has already been stopped\n                if drivetrain_l_needs_to_be_stopped_controller_1:\n                    # stop the left drive motor\n                    left_drive_smart.stop()\n                    # tell the code that the left motor has been stopped\n                    drivetrain_l_needs_to_be_stopped_controller_1 = False\n            else:\n                # reset the toggle so that the deadband code knows to stop the left motor next\n                # time the input is in the deadband range\n                drivetrain_l_needs_to_be_stopped_controller_1 = True\n            # check if the value is inside of the deadband range\n            if drivetrain_right_side_speed < 5 and drivetrain_right_side_speed > -5:\n                # check if the right motor has already been stopped\n                if drivetrain_r_needs_to_be_stopped_controller_1:\n                    # stop the right drive motor\n                    right_drive_smart.stop()\n                    # tell the code that the right motor has been stopped\n                    drivetrain_r_needs_to_be_stopped_controller_1 = False\n            else:\n                # reset the toggle so that the deadband code knows to stop the right motor next\n                # time the input is in the deadband range\n                drivetrain_r_needs_to_be_stopped_controller_1 = True\n            \n            # only tell the left drive motor to spin if the values are not in the deadband range\n            if drivetrain_l_needs_to_be_stopped_controller_1:\n                left_drive_smart.set_velocity(drivetrain_left_side_speed, PERCENT)\n                left_drive_smart.spin(FORWARD)\n            # only tell the right drive motor to spin if the values are not in the deadband range\n            if drivetrain_r_needs_to_be_stopped_controller_1:\n                right_drive_smart.set_velocity(drivetrain_right_side_speed, PERCENT)\n                right_drive_smart.spin(FORWARD)\n        # wait before repeating the process\n        wait(5, MSEC)\n\n# define variable for remote controller enable/disable\nremote_control_code_enabled = True\n\nrc_auto_loop_thread_controller_1 = Thread(rc_auto_loop_function_controller_1)\n\n#endregion VEXcode Generated Robot Configuration\n\n# ------------------------------------------\n# \n# \tProject:      VEXcode Project\n#\tAuthor:       VEX\n#\tCreated:\n#\tDescription:  VEXcode V5 Python Project\n# \n# ------------------------------------------\n\n# Library imports\nfrom vex import *\n#imports\nimport time\n#import threading\nfrom math import sin,cos,tan,asin,acos,atan,pi,degrees,radians,sqrt\n\n# Begin project code\nwait(30,MSEC)\n\n################################\n#          Variables           #\n################################\n\n\nTrackerRadius = 13.63/2\n\nintake.set_velocity(90, PERCENT)\nintake.set_stopping(HOLD)\n\nIsDoinked = False\nWallPosition = 0\nhold_threshold = .3\nWall.set_stopping(HOLD)\n\n'''\nKp = 1.4 or .4\nKi = 0.4 or .03\nKd = 0.3 or .2\n''' \n\n################################\n#       CLASS DEFINITIONS      #\n################################\nHeading = 0\n\nclass Sensor_Manager:\n    global Heading\n    def __init__(self):\n        #self.IsUpdated = False\n        self.IMU1 =0\n        self.IMU2 = 0\n        self.TrackerF = 0\n        self.TrackerF2 = 0\n        #self.TrackerS = 0\n        #self.prevIMU1 = self.IMU1\n        #self.prevIMU2 = self.IMU2\n        self.prevTrackerF = self.TrackerF\n        #self.prevTrackerS = self.TrackerS\n        \n    #def get_IMU1(self):\n        #return imu1.heading(DEGREES)\n    #def get_IMU2(self):\n        #return imu2.heading(DEGREES)\n    def get_TrackerF(self):\n        return L3.position(DEGREES)* .0165\n    def get_TrackerF2(self):\n        return R3.position(DEGREES)* .0165\n    def get_TrackerS(self):\n        pass\n    def get_Heading(self,wWeight=1):\n        global Heading\n        num = degrees((self.TrackerF - self.TrackerF2)/(2*TrackerRadius))\n        while num > 180:\n            num -=360\n        while num < -180:\n            num += 360\n        Heading = num\n        return num\n\n    def update_Secondary(self):\n        #some loops\n        pass\n    def update(self):\n        Heading = self.get_Heading()\n        #self.prevIMU1 = self.IMU1\n        #self.prevIMU2 = self.IMU2\n        self.prevTrackerF = self.TrackerF\n        #self.prevTrackerS = self.TrackerS\n        #self.IMU1 = self.get_IMU1()\n        #self.IMU2 = self.get_IMU2()\n        self.TrackerF = self.get_TrackerF()\n        self.TrackerF2 = self.get_TrackerF2()\n        #self.TrackerS = self.get_TrackerS()\n        #self.IsUpdated = True\n\nclass PID_Controller:\n    def __init__(self, Kp, Ki, Kd, target, alpha=0.2, umax=100, umin=.5):\n        self.Kp = Kp\n        self.Ki = Ki\n        self.Kd = Kd\n        self.target = target\n        self.alpha = alpha  # Filtering coefficient for derivative term\n        self.umax = umax # integrator clamp max\n        self.umin = umin # integrator clamp min\n        \n        self.previous_error = 0     #all these are updated but start at zero\n        self.previous_derivative = 0\n        self.integral = 0\n        self.filtered_derivative = 0\n        self.prev_update = time.time()\n        \n    def update(self, Progress, dt):\n        error = self.target - Progress\n        print(error,\"error\")\n        \n        # Proportional term\n        P = self.Kp * error\n        # Derivative term (unfiltered)\n        if dt != 0:\n            D_unfiltered = (error - self.previous_error) / dt\n        else: \n            D_unfiltered = 1\n        \n        # Apply low-pass filter to the derivative term\n        self.filtered_derivative =low_pass_filter(self.previous_derivative, D_unfiltered, self.alpha)\n        p_d = self.filtered_derivative\n        #self.filtered_derivative = self.alpha * D_unfiltered + (1 - self.alpha) * self.filtered_derivative\n        D = self.Kd * self.filtered_derivative\n        \n        \n        # Clamped Integral term\n        dint_unclamped = error * dt\n        I_unclamped = self.Ki * dint_unclamped\n        if self.umin < abs(P + I_unclamped + D) < self.umax:\n            self.integral += dint_unclamped\n            I = I_unclamped\n        else: I = I_unclamped   \n\n        # Control output\n        U = P + I + D\n        if U > 40:\n            U = 40\n        elif U<-40:\n            U = -40\n        \n        # Update previous \n        self.previous_error = error\n        self.previous_derivative = p_d \n        print(U,\"U\")\n        return U\n\n################################\n#        FUNCS & INITS         #\n################################\nClampActive = False\n\ndef SelectAuton():\n    controller_1.screen.print(\"AUTON /n Red <- use dpad -> Blue\")\n\n    #Buttons#\n\ndef Intake():\n    intake.spin(FORWARD)\ndef Outtake():\n    intake.spin(REVERSE) \n\ndef wallstake(pos):\n    global WallPosition\n\n    if pos == 0:\n        Wall.spin_to_position(0*7*2.3, DEGREES,wait=False)\n        WallPosition = 0\n    elif pos == 1:\n        Wall.spin_to_position(21*2.3,DEGREES,wait=False)\n        WallPosition = 1\n    elif pos == 2: \n        Wall.spin_to_position(114*2.3,DEGREES,wait=False)\n        WallPosition = 2\n    else: \n        if WallPosition == 0:\n            Wall.spin_to_position(21*2.3,DEGREES,wait=False)\n            WallPosition = 1\n        elif WallPosition == 1 or WallPosition == 2:\n            intake.spin_for(REVERSE,45,DEGREES)\n            while controller_1.buttonY.pressing() == True:\n                Wall.spin_to_position(110*2.3, DEGREES,wait=False)\n                WallPosition = 2\n            else:\n                Wall.spin_to_position(21*2.3,DEGREES,wait=False)\n                WallPosition = 1\n\n\ndef clamp():\n    Mogo.set(True)\ndef release_clamp():\n    Mogo.set(False)\n\ndef doink():\n    global IsDoinked\n    IsDoinked = not IsDoinked\n    doinker.set(IsDoinked)\ndef release_doink():\n    doinker.set(False)\n\n################################\n#         CONTROL LOOP         #\n################################\nWall.set_velocity(30, PERCENT)\nintake.set_velocity(100,PERCENT)\n\ndef driver_control():\n    global alpha3, TURN_SENS\n    drivetrain.set_drive_velocity(100, PERCENT)\n    drivetrain.set_turn_velocity(0, PERCENT)\n    Wall.set_position(0, DEGREES)\n\n    driving = True\n\n    controller_1.buttonRight.pressed(doink)\n\n    print(\"driving\")\n    #buttons#\n    while True:\n        #driving#\n        if controller_1.buttonL2.pressing():\n            alpha3 = .0\n            TURN_SENS = .9\n        else:\n            alpha3 = .98\n            TURN_SENS = .4\n\n        #subsystems#\n\n        if controller_1.buttonR1.pressing():\n            Intake()\n        elif controller_1.buttonR2.pressing():\n            Outtake()\n        else: intake.stop()\n\n        if controller_1.buttonL1.pressing():\n                release_clamp()\n        else:\n            clamp()\n\n        if controller_1.buttonB.pressing():\n            wallstake(0)\n        if controller_1.buttonY.pressing() :\n            wallstake(None)\n        \n\n\ndef autonomous():\n    drivetrain.set_drive_velocity(0, PERCENT)\n    drivetrain.set_turn_velocity(0, PERCENT)\n    \n    intake.set_velocity(100,PERCENT)\n    \n    drivetrain.set_stopping(HOLD)\n    drivetrain.drive(FORWARD)\n    drivetrain.turn(RIGHT)\n\n    Manager = Sensor_Manager()\n\n    #ALLIANCE STAKE\n    ############################################################################\n\n    #Drive back 35 inches to land in front of alliance stake\n\n\n    Control = PID_Controller(2, .4, .3, -35+Manager.TrackerF)\n    while True:\n        Manager.update()\n        drivetrain.set_drive_velocity(Control.update(Manager.TrackerF, time.time()-Control.prev_update), PERCENT)\n        if Control.target -.5 < Manager.TrackerF < Control.target +.5:\n            drivetrain.set_drive_velocity(0, PERCENT)\n            del Control\n            break\n\n    print(\"turning\")\n    wait(.1,SECONDS)\n    clamp()\n    intake.spin(FORWARD)\n    wait(.2,SECONDS)\n\n    \n    Control = PID_Controller(.4, .03, .2, -90)\n    while True:\n        Manager.update()\n        drivetrain.set_turn_velocity(Control.update(Heading, time.time()-Control.prev_update), PERCENT)\n        if Control.target -.3 < Heading < Control.target +.3:\n            drivetrain.set_turn_velocity(0, PERCENT)\n            del Control\n            break\n  \n\n    #Drive back 35 inches to land in front of alliance stake\n    Control = PID_Controller(2, .4, .3, 24+Manager.TrackerF)\n    while True:\n        Manager.update()\n        drivetrain.set_drive_velocity(Control.update(Manager.TrackerF, time.time()-Control.prev_update), PERCENT)\n        if Control.target -.5 < Manager.TrackerF < Control.target +.5:\n            drivetrain.set_drive_velocity(0, PERCENT)\n            del Control\n            break\n\n    Control = PID_Controller(.4, .03, .2, -120)\n    while True:\n        Manager.update()\n        drivetrain.set_turn_velocity(Control.update(Heading, time.time()-Control.prev_update), PERCENT)\n        if Control.target -.3 < Heading < Control.target +.3:\n            drivetrain.set_turn_velocity(0, PERCENT)\n            del Control\n            break\n\n    #Drive back 35 inches to land in front of alliance stake\n    Control = PID_Controller(2, .4, .3, 30+Manager.TrackerF)\n    while True:\n        Manager.update()\n        drivetrain.set_drive_velocity(Control.update(Manager.TrackerF, time.time()-Control.prev_update), PERCENT)\n        if Control.target -.5 < Manager.TrackerF < Control.target +.5:\n            drivetrain.set_drive_velocity(0, PERCENT)\n            del Control\n            break\n\ncompetition = Competition(driver_control, autonomous)\n\n\n################################\n#            _SAVES            #\n################################\n\n\n'''#region VEXcode Generated Robot Configuration\nfrom vex import *\nimport urandom\n\n# Brain should be defined by default\nbrain=Brain()\n\n# Robot configuration code save\nMAX_DV = 96\nMAX_TV = 80\nTURN_SENS = .4\nalpha3 = .98\ncontroller_1 = Controller(PRIMARY)\nintake = Motor(Ports.PORT2, GearSetting.RATIO_18_1, False)\nMogo = DigitalOut(brain.three_wire_port.a)\ndoinker = DigitalOut(brain.three_wire_port.b)\nWall = Motor(Ports.PORT1, GearSetting.RATIO_18_1, False)\nL3 = Motor(Ports.PORT18, GearSetting.RATIO_6_1, True)\nR3 = Motor(Ports.PORT8, GearSetting.RATIO_6_1, False)\nleft_motor_a = Motor(Ports.PORT20, GearSetting.RATIO_6_1, True)\nleft_motor_b = Motor(Ports.PORT19, GearSetting.RATIO_6_1, False)\nleft_drive_smart = MotorGroup(left_motor_a, left_motor_b,L3)\nright_motor_a = Motor(Ports.PORT10, GearSetting.RATIO_6_1, False)\nright_motor_b = Motor(Ports.PORT9, GearSetting.RATIO_6_1, True)\nright_drive_smart = MotorGroup(right_motor_a, right_motor_b,R3)\ndrivetrain = DriveTrain(left_drive_smart, right_drive_smart, 299.24, 295, 40, MM, 0.6)\n\n\n# wait for rotation sensor to fully initialize\nwait(30, MSEC)\n\n\n# Make random actually random\ndef initializeRandomSeed():\n    wait(100, MSEC)\n    random = brain.battery.voltage(MV) + brain.battery.current(CurrentUnits.AMP) * 100 + brain.timer.system_high_res()\n    urandom.seed(int(random))\n      \n# Set random seed \ninitializeRandomSeed()\n\n\ndef play_vexcode_sound(sound_name):\n    # Helper to make playing sounds from the V5 in VEXcode easier and\n    # keeps the code cleaner by making it clear what is happening.\n    print(\"VEXPlaySound:\" + sound_name)\n    wait(5, MSEC)\n\n# add a small delay to make sure we don't print in the middle of the REPL header\nwait(100, MSEC)\n# clear the console to make sure we don't have the REPL in the console\nprint(\"\\033[2J\")\n\n\n\n# define variables used for controlling motors based on controller inputs\ndrivetrain_l_needs_to_be_stopped_controller_1 = False\ndrivetrain_r_needs_to_be_stopped_controller_1 = False\n\ndef low_pass_filter(vprev, value, alpha):\n    return alpha*vprev +(1-alpha)*value\n\n\n# define a task that will handle monitoring inputs from controller_1\ndef rc_auto_loop_function_controller_1():\n    axis_3 = 0 \n    global drivetrain_l_needs_to_be_stopped_controller_1, drivetrain_r_needs_to_be_stopped_controller_1, remote_control_code_enabled\n    # process the controller input every 20 milliseconds\n    # update the motors based on the input values\n    while True:\n        global alpha3,TURN_SENS\n        #accel limiter by average:\n        axis_3 = low_pass_filter(axis_3, controller_1.axis3.position(), alpha3)\n\n        if remote_control_code_enabled:\n\n            # calculate the drivetrain motor velocities from the controller joystick axies\n            # left = axis3 + axis1\n            # right = axis3 - axis1\n            DL = axis_3+(controller_1.axis1.position()*TURN_SENS)\n            DR = axis_3-(controller_1.axis1.position()*TURN_SENS)\n\n            drivetrain_left_side_speed = max(min(DL, MAX_DV),-MAX_DV)\n            drivetrain_right_side_speed = max(min(DR, MAX_DV),-MAX_DV)\n            \n            # check if the value is inside of the deadband range\n            if drivetrain_left_side_speed < 5 and drivetrain_left_side_speed > -5:\n                # check if the left motor has already been stopped\n                if drivetrain_l_needs_to_be_stopped_controller_1:\n                    # stop the left drive motor\n                    left_drive_smart.stop()\n                    # tell the code that the left motor has been stopped\n                    drivetrain_l_needs_to_be_stopped_controller_1 = False\n            else:\n                # reset the toggle so that the deadband code knows to stop the left motor next\n                # time the input is in the deadband range\n                drivetrain_l_needs_to_be_stopped_controller_1 = True\n            # check if the value is inside of the deadband range\n            if drivetrain_right_side_speed < 5 and drivetrain_right_side_speed > -5:\n                # check if the right motor has already been stopped\n                if drivetrain_r_needs_to_be_stopped_controller_1:\n                    # stop the right drive motor\n                    right_drive_smart.stop()\n                    # tell the code that the right motor has been stopped\n                    drivetrain_r_needs_to_be_stopped_controller_1 = False\n            else:\n                # reset the toggle so that the deadband code knows to stop the right motor next\n                # time the input is in the deadband range\n                drivetrain_r_needs_to_be_stopped_controller_1 = True\n            \n            # only tell the left drive motor to spin if the values are not in the deadband range\n            if drivetrain_l_needs_to_be_stopped_controller_1:\n                left_drive_smart.set_velocity(drivetrain_left_side_speed, PERCENT)\n                left_drive_smart.spin(FORWARD)\n            # only tell the right drive motor to spin if the values are not in the deadband range\n            if drivetrain_r_needs_to_be_stopped_controller_1:\n                right_drive_smart.set_velocity(drivetrain_right_side_speed, PERCENT)\n                right_drive_smart.spin(FORWARD)\n        # wait before repeating the process\n        wait(5, MSEC)\n\n'''","textLanguage":"python","robotConfig":[{"port":[],"name":"controller_1","customName":false,"deviceType":"Controller","deviceClass":"controller","setting":{"left":"","leftDir":"false","right":"","rightDir":"false","upDown":"","upDownDir":"false","xB":"","xBDir":"false","drive":"split","id":"primary"},"triportSourcePort":22},{"port":[2],"name":"intake","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio18_1","id":"partner"},"triportSourcePort":22},{"port":[1],"name":"Mogo","customName":true,"deviceType":"DigitalOut","deviceClass":"digital_out","setting":{"id":"partner"},"triportSourcePort":22},{"port":[2],"name":"doinker","customName":true,"deviceType":"DigitalOut","deviceClass":"digital_out","setting":{"id":"partner"},"triportSourcePort":22},{"port":[1],"name":"Wall","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio18_1","id":"partner"},"triportSourcePort":22},{"port":[18],"name":"L3","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio6_1"},"triportSourcePort":22},{"port":[8],"name":"R3","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio6_1"},"triportSourcePort":22},{"port":[20,19,10,9,0],"name":"drivetrain","customName":false,"deviceType":"Drivetrain","deviceClass":"smartdrive","setting":{"type":"4-motor","wheelSize":"wheel325in","gear":"ratio6_1","gearRatio":"36:60","direction":"fwd","gyroType":"none","width":"295","unit":"mm","wheelbase":"40","wheelbaseUnit":"mm","xOffset":"0","xOffsetUnit":"mm","yOffset":"0","yOffsetUnit":"mm","thetaOffset":"180"},"triportSourcePort":null}],"slot":2,"platform":"V5","sdkVersion":"20240802.15.00.00","appVersion":"4.0.7","fileFormat":"2.0.0","targetBrainGen":"First","v5Sounds":[{"name":"game over","url":"static/sounds/mixkit-arcade-retro-game-over-213.wav"}],"v5SoundsEnabled":false}