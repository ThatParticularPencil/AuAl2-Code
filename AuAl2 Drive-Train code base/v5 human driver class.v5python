{"mode":"Text","hardwareTarget":"brain","textContent":"#region VEXcode Generated Robot Configuration\nfrom vex import *\nimport urandom\n\n# Brain should be defined by default\nbrain=Brain()\n\n# Robot configuration code\ncontroller_1 = Controller(PRIMARY)\nL1 = Motor(Ports.PORT2, GearSetting.RATIO_6_1, False)\nL2 = Motor(Ports.PORT10, GearSetting.RATIO_6_1, False)\nL3 = Motor(Ports.PORT9, GearSetting.RATIO_6_1, True)\nR1 = Motor(Ports.PORT11, GearSetting.RATIO_6_1, False)\nR2 = Motor(Ports.PORT20, GearSetting.RATIO_6_1, False)\nR3 = Motor(Ports.PORT19, GearSetting.RATIO_6_1, True)\nintake = Motor(Ports.PORT21, GearSetting.RATIO_18_1, True)\nMogo = DigitalOut(brain.three_wire_port.a)\ndoinker = DigitalOut(brain.three_wire_port.b)\nWall = Motor(Ports.PORT1, GearSetting.RATIO_18_1, False)\n\n\n# wait for rotation sensor to fully initialize\nwait(30, MSEC)\n\n\n# Make random actually random\ndef initializeRandomSeed():\n    wait(100, MSEC)\n    random = brain.battery.voltage(MV) + brain.battery.current(CurrentUnits.AMP) * 100 + brain.timer.system_high_res()\n    urandom.seed(int(random))\n      \n# Set random seed \ninitializeRandomSeed()\n\n\ndef play_vexcode_sound(sound_name):\n    # Helper to make playing sounds from the V5 in VEXcode easier and\n    # keeps the code cleaner by making it clear what is happening.\n    print(\"VEXPlaySound:\" + sound_name)\n    wait(5, MSEC)\n\n# add a small delay to make sure we don't print in the middle of the REPL header\nwait(200, MSEC)\n# clear the console to make sure we don't have the REPL in the console\nprint(\"\\033[2J\")\n\n#endregion VEXcode Generated Robot Configuration\n\n# ------------------------------------------\n# \n# \tProject:      VEXcode Project\n#\tAuthor:       VEX\n#\tCreated:\n#\tDescription:  VEXcode V5 Python Project\n# \n# ------------------------------------------\n\n# Library imports\nfrom vex import *\n#imports\nimport time\n#import threading\nfrom math import sin,cos,tan,asin,acos,atan,pi,degrees,radians,sqrt\n\n# Begin project code\nwait(30,MSEC)\n\n\n\n################################\n#          Variables           #\n################################\nStickDeadzone = .005\nStickCurveShape = \"linear\"\n\nTrackingDiameter = 2.75\nWheelDiameter = 3.75\n\nAcceltime = .7\nVelConst = 1/(Acceltime**2)\nMaxTurnRadius = 10\n#normalize turns from 1.25',\n\nBotWidth = 1.05\n\nintake.set_velocity(80, PERCENT)\nintake.set_stopping(HOLD)\n\nIsDoinked = False\nWallPosition = 0\nhold_threshold = .3\nWall.set_stopping(HOLD)\n\n\n################################\n#       CLASS DEFINITIONS      #\n################################\nclass Sensor_Manager:\n    def __init__(self):\n        self.IsUpdated = False\n        #self.time = time.time\n        #self.prevtime = time.time\n        #self.TrackerF = self.get_TrackerF\n        self.Lstick = 0\n        self.Rstick = 0\n        #self.Velocity = self.get_Velocity\n        #self.prevTrackerF = self.TrackerF\n        #self.prevLstick = self.Lstick\n        #self.prevRstick = self.Rstick\n        #self.prevVelocity = self.Velocity\n        \n    def get_TrackerF(self):\n        pass\n\n    def get_Lstick(self):\n        stick = controller_1.axis3.position()/100 #v5 controller method\n        #Sensitivity Curve\n        if -1 <= stick <= -StickDeadzone:\n            curvedstick = -(stick**2)\n        elif StickDeadzone <= stick <= 1:\n            curvedstick = stick**2\n        else: curvedstick = 0\n        return curvedstick\n\n    def get_Rstick(self):\n        stick = controller_1.axis1.position()/100 #v5 controller method\n        #Sensitivity Curve\n        if -1 <= stick <= -StickDeadzone:\n            curvedstick = -(stick**2)\n        elif StickDeadzone <= stick <= 1:\n            curvedstick = stick**2\n        else: curvedstick = 0\n        return curvedstick\n    \n\n\n    '''def get_Velocity(self):\n        pass'''\n\n    def update_Inputs(self):\n        self.Rstick = self.get_Rstick()\n        self.Lstick = self.get_Lstick()\n        self.IsUpdated = True\n    \n    def update_Variables(self):\n        #self.prevtime = self.time\n        #self.prevVelocity = self.Velocity\n        #self.Velocity = self.get_Velocity\n        #self.prevRstick = self.Rstick\n        #self.Rstick = self.get_Rstick\n        #self.prevLstick = self.Lstick\n        #self.Lstick = self.get_Lstick\n        #self.prevTrackerF = self.TrackerF\n        #self.TrackerF = self.get_TrackerF\n        self.IsUpdated = True\n\n\n################################\n#        FUNCS & INITS         #\n################################\n\nSensors = Sensor_Manager\nClampActive = False\n\ndef SelectAuton():\n    controller_1.screen.print(\"AUTON /n Red <- use dpad -> Blue\")\n\ndef Drive(left,right):\n    L1.set_velocity(left*100, PERCENT)\n    L2.set_velocity(left*100, PERCENT)\n    L3.set_velocity(left*100, PERCENT)\n    R1.set_velocity(right*-100, PERCENT)\n    R2.set_velocity(right*-100, PERCENT)\n    R3.set_velocity(right*-100, PERCENT)\n\n\ndef low_pass_filter(vprev, value, alpha):\n    return alpha*vprev +(1-alpha)*value\n\ndef CurvatureDrive(Lstick, Rstick):\n   #Assuming Normalized RstickX Values to -1 < x < 1\n\n    #Sensitivity Curve is already done\n    print(\"TV\", Rstick)\n    if Rstick == 0:\n        LeftVel,RightVel = Lstick,Lstick\n        return LeftVel,RightVel\n    if Lstick == 0:\n        LeftVel,RightVel = Rstick/3,-Rstick/3\n        return LeftVel,RightVel\n \n    #convert to radius\n    TurnRadius = -MaxTurnRadius-1 * abs(Rstick) + MaxTurnRadius+2\n    #print(\"TurnRadius\",TurnRadius)\n    if TurnRadius == 0:\n        TurnRadius = .001\n\n    #calc the drive lengths then velocities; outputs are normalized\n    LongArc = 2*(TurnRadius+BotWidth/2)*pi\n    MidArc =  2*(TurnRadius)*pi\n    ShortArc = 2*(TurnRadius - BotWidth/2)*pi\n    \n    #so it dont ask for speeds above 100\n    TanVelocity = Lstick\n    Ltom = LongArc/MidArc\n    Stom = ShortArc/MidArc\n    if Ltom*abs(TanVelocity) > 1:\n        if TanVelocity >0:\n            TanVelocity = 1/Ltom \n        else:\n            TanVelocity = -1/Ltom\n        if TanVelocity > 1:\n            TanVelocity = 1\n        elif TanVelocity <-1:\n            TanVelocity = -1 #adds a buffer in case of crappy code\n\n    #Algebra so the Arc:MidArc = vel:TanVel\n    if Rstick < 0:\n        RightVel = Ltom * TanVelocity\n        LeftVel = Stom * TanVelocity \n    elif Rstick > 0:\n        LeftVel = Ltom * TanVelocity\n        RightVel = Stom * TanVelocity\n    \n    if Lstick <= 0:\n        LeftVel,RightVel = RightVel,LeftVel\n\n    return LeftVel,RightVel\n\n\n    #Buttons#\n\ndef Intake():\n    intake.spin(FORWARD)\n    \ndef Outtake():\n    intake.spin(REVERSE) \n\ndef wallstake(pos = None):\n    global WallPosition\n\n    if pos == 0:\n        Wall.spin_to_position(0, DEGREES)\n        WallPosition = 0\n    elif pos == 1:\n        Wall.spin_to_position(15,DEGREES)\n        WallPosition = 1\n    elif pos == 2: \n        Wall.spin_to_position(110,DEGREES)\n        WallPosition = 2\n    else: \n        if WallPosition == 0:\n            Wall.spin_to_position(15,DEGREES)\n            WallPosition = 1\n        elif WallPosition == 1 or WallPosition == 2:\n            while controller_1.buttonA.pressing() == True:\n                L1.spin_to_position(110, DEGREES)\n                WallPosition = 2\n            else:\n                Wall.spin_to_position(15,DEGREES)\n                WallPosition = 1\n\n                \n\n\n\ndef clamp():\n    Mogo.set(True)\ndef release_clamp():\n    Mogo.set(False)\n\ndef doink():\n    global IsDoinked\n    IsDoinked = not IsDoinked\n    doinker.set(IsDoinked)\ndef release_doink():\n    doinker.set(False)\n\n################################\n#           THREADS            #\n################################\n#SensorThread = threading.Thread(target=Sensors.update_Variables)\n#InputThread = threading.Thread(target=Sensors.update_Inputs)\n#TrackingThread = threading.Thread(target=AutoDriver.update)\n#Main thread for managing Waypoints\n\n################################\n#         CONTROL LOOP         #\n################################\n\n\ndef autonomous():\n    def autonomous():\n        L1.spin(FORWARD)\n        L2.spin(FORWARD)\n        L3.spin(FORWARD)\n        R1.spin(FORWARD)\n        R2.spin(FORWARD)\n        R3.spin(FORWARD)\n\n        Drive(.2,.2)\n        wait(4,SECONDS)\n        Drive(0,0)\n\n\ndef driver_control():\n    L1.spin(FORWARD)\n    L2.spin(FORWARD)\n    L3.spin(FORWARD)\n    R1.spin(FORWARD)\n    R2.spin(FORWARD)\n    R3.spin(FORWARD)\n    L1.set_stopping(COAST)\n    L2.set_stopping(COAST)\n    L3.set_stopping(COAST)\n    R1.set_stopping(COAST)\n    R2.set_stopping(COAST)\n    R3.set_stopping(COAST)\n    \n    driving = True\n    clamp()\n\n    Sensors = Sensor_Manager()\n    Sensors.update_Inputs()\n    #InputThread.start\n    Drive(0,0)\n\n    print(\"driving\")\n    #buttons#\n    while True:\n        #driving#\n        Sensors.update_Inputs()\n        left,right = CurvatureDrive(Sensors.Lstick, Sensors.Rstick)\n        Drive(left,right) \n\n        #subsystems#\n        controller_1.buttonUp.pressed(doink)\n\n        if controller_1.buttonR1.pressing():\n            Intake()\n        elif controller_1.buttonR2.pressing():\n            Outtake()\n        else: intake.stop()\n\n        if controller_1.buttonL1.pressing():\n            release_clamp()\n        else:\n            clamp()\n\n        controller_1.buttonB.pressed(wallstake(0))\n        controller_1.buttonA.pressed(wallstake()) \n\n\ncompetition = Competition(driver_control, autonomous)\n","textLanguage":"python","robotConfig":[{"port":[],"name":"controller_1","customName":false,"deviceType":"Controller","deviceClass":"controller","setting":{"left":"","leftDir":"false","right":"","rightDir":"false","upDown":"","upDownDir":"false","xB":"","xBDir":"false","drive":"none","id":"primary"},"triportSourcePort":22},{"port":[2],"name":"L1","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio6_1"},"triportSourcePort":22},{"port":[10],"name":"L2","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio6_1"},"triportSourcePort":22},{"port":[9],"name":"L3","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"true","fwd":"forward","rev":"reverse","gear":"ratio6_1"},"triportSourcePort":22},{"port":[11],"name":"R1","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio6_1"},"triportSourcePort":22},{"port":[20],"name":"R2","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio6_1"},"triportSourcePort":22},{"port":[19],"name":"R3","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"true","fwd":"forward","rev":"reverse","gear":"ratio6_1"},"triportSourcePort":22},{"port":[21],"name":"intake","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"true","fwd":"forward","rev":"reverse","gear":"ratio18_1"},"triportSourcePort":22},{"port":[1],"name":"Mogo","customName":true,"deviceType":"DigitalOut","deviceClass":"digital_out","setting":{"id":"partner"},"triportSourcePort":22},{"port":[2],"name":"doinker","customName":true,"deviceType":"DigitalOut","deviceClass":"digital_out","setting":{"id":"partner"},"triportSourcePort":22},{"port":[1],"name":"Wall","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio18_1","id":"partner"},"triportSourcePort":22}],"slot":7,"platform":"V5","sdkVersion":"20240802.15.00.00","appVersion":"4.0.7","minVersion":"3.1.0","fileFormat":"2.0.0","targetBrainGen":"First","v5Sounds":[{"name":"game over","url":"static/sounds/mixkit-arcade-retro-game-over-213.wav"}],"v5SoundsEnabled":false,"target":"Physical"}