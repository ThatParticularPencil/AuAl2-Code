{"mode":"Text","hardwareTarget":"brain","textContent":"\nimport time\nfrom vex import *\nimport urandom\nfrom math import sin,cos,tan,atan2,pi,degrees,radians,sqrt\n\n# Brain should be defined by default\nbrain=Brain()\n\n# Robot configuration code\nMAX_DV = 100\nTURN_SENS = .35\ncontroller_1 = Controller(PRIMARY)\nIMU = Inertial(Ports.PORT6)\nPOD = Rotation(Ports.PORT21)\nflex = Motor(Ports.PORT3, GearSetting.RATIO_6_1, False)\nhooks = Motor(Ports.PORT2, GearSetting.RATIO_6_1, True)\nintake = MotorGroup(flex, hooks)\nMogo = DigitalOut(brain.three_wire_port.a)\ndoinkerR = DigitalOut(brain.three_wire_port.b)\ndoinkerL = DigitalOut(brain.three_wire_port.c)\nWall = Motor(Ports.PORT4, GearSetting.RATIO_18_1, False)\nL3 = Motor(Ports.PORT18, GearSetting.RATIO_6_1, True)\nR3 = Motor(Ports.PORT8, GearSetting.RATIO_6_1, False)\nleft_motor_a = Motor(Ports.PORT20, GearSetting.RATIO_6_1, True)\nleft_motor_b = Motor(Ports.PORT19, GearSetting.RATIO_6_1, True)\nleft_drive_smart = MotorGroup(left_motor_a, left_motor_b,L3)\nright_motor_a = Motor(Ports.PORT10, GearSetting.RATIO_6_1, False)\nright_motor_b = Motor(Ports.PORT9, GearSetting.RATIO_6_1, False)\nright_drive_smart = MotorGroup(right_motor_a, right_motor_b,R3)\ndrivetrain = DriveTrain(left_drive_smart, right_drive_smart, 299.24, 295, 40, MM, 0.6)\n\n# wait for rotation sensor to fully initialize\nwait(30, MSEC)\ndef initializeRandomSeed():\n    wait(100, MSEC)\n    random = brain.battery.voltage(MV) + brain.battery.current(CurrentUnits.AMP) * 100 + brain.timer.system_high_res()\n    urandom.seed(int(random))\n      \ninitializeRandomSeed()\n\n\ndef play_vexcode_sound(sound_name):\n    # Helper to make playing sounds from the V5 in VEXcode easier and\n    print(\"VEXPlaySound:\" + sound_name)\n    wait(5, MSEC)\n# add a small delay to make sure we don't print in the middle of the REPL header\nwait(200, MSEC)\n# clear the console to make sure we don't have the REPL in the console\nprint(\"\\033[2J\")\n\n# define variables used for controlling motors based on controller inputs\ndrivetrain_l_needs_to_be_stopped_controller_1 = False\ndrivetrain_r_needs_to_be_stopped_controller_1 = False\n\ndef low_pass_filter(vprev, value, alpha):\n   return alpha*vprev +(1-alpha)*value\n\n# define a task that will handle monitoring inputs from controller_1\ndef rc_auto_loop_function_controller_1():\n    global drivetrain_l_needs_to_be_stopped_controller_1, drivetrain_r_needs_to_be_stopped_controller_1, remote_control_code_enabled\n    # process the controller input every 20 milliseconds\n    # update the motors based on the input values\n    while True:\n        if remote_control_code_enabled:\n            # calculate the drivetrain motor velocities from the controller joystick axies\n            # left = axis3 + axis1\n            # right = axis3 - axis1\n            drivetrain_left_side_speed = controller_1.axis3.position()+(controller_1.axis1.position()*TURN_SENS)\n            drivetrain_right_side_speed = controller_1.axis3.position()-(controller_1.axis1.position()*TURN_SENS)\n            \n            # check if the value is inside of the deadband range\n            if drivetrain_left_side_speed < 5 and drivetrain_left_side_speed > -5:\n                # check if the left motor has already been stopped\n                if drivetrain_l_needs_to_be_stopped_controller_1:\n                    left_drive_smart.stop()\n                    drivetrain_l_needs_to_be_stopped_controller_1 = False\n            else:\n                # reset the toggle so that the deadband code knows to stop the left motor next\n                # time the input is in the deadband range\n                drivetrain_l_needs_to_be_stopped_controller_1 = True\n            # check if the value is inside of the deadband range\n            if drivetrain_right_side_speed < 5 and drivetrain_right_side_speed > -5:\n                # check if the right motor has already been stopped\n                if drivetrain_r_needs_to_be_stopped_controller_1:\n                    right_drive_smart.stop()\n                    drivetrain_r_needs_to_be_stopped_controller_1 = False\n            else:\n                # reset the toggle so that the deadband code knows to stop the right motor next\n                # time the input is in the deadband range\n                drivetrain_r_needs_to_be_stopped_controller_1 = True\n            \n            # only tell the left drive motor to spin if the values are not in the deadband range\n            if drivetrain_l_needs_to_be_stopped_controller_1:\n                left_drive_smart.set_velocity(drivetrain_left_side_speed, PERCENT)\n                left_drive_smart.spin(FORWARD)\n            # only tell the right drive motor to spin if the values are not in the deadband range\n            if drivetrain_r_needs_to_be_stopped_controller_1:\n                right_drive_smart.set_velocity(drivetrain_right_side_speed, PERCENT)\n                right_drive_smart.spin(FORWARD)\n        # wait before repeating the process\n        wait(20, MSEC)\n\n# define variable for remote controller enable/disable\nremote_control_code_enabled = True\n\nrc_auto_loop_thread_controller_1 = Thread(rc_auto_loop_function_controller_1)\n\n#endregion VEXcode Generated Robot Configuration\n\n# ------------------------------------------\n# \n# \tProject:      VEXcode Project\n#\tAuthor:       VEX\n#\tCreated:\n#\tDescription:  VEXcode V5 Python Project\n# \n# ------------------------------------------\n\n# Begin project code\nwait(5,MSEC)\n\n################################\n#          Variables           #\n################################\n\nTeam = \"RED\" #either \"RED\" or \"BlUE\"\nDriveRadius = 13.92 #bot radius\nTrackerRadius = 2.3 #Odom ppod placement right of the TC\nglobal_doink = [False,False]\n\n'''\nKp = 1.4 or .4\nKi = 0.4 or .03\nKd = 0.3 or .2\n''' \n\n################################\n#       CLASS DEFINITIONS      #\n################################\nHeading = 0\n\nclass Sensor_Manager:\n    global Heading\n    def __init__(self):\n        self.IMU = 0\n        self.TrackerF = 0\n        self.TrackerL = 0\n        self.TrackerR = 0\n        self.prevHeading = Heading\n        self.prev_IMU = self.IMU\n        self.prev_TrackerF = self.TrackerF\n        self.prevTrackerL, self.prevTrackerR = self.TrackerL, self.TrackerR\n        \n    def get_TrackerF(self):\n        return POD.position(DEGREES) * .024 \n        print(POD.position(DEGREES)) \n\n    def get_Trackers(self):\n        return (L3.position(DEGREES) *.0215) - (R3.position(DEGREES) *.0215)\n\n    def get_Heading(self):\n        global Heading\n        num = degrees((self.get_Trackers())/(DriveRadius))\n        Heading = num\n        return num \n        \n    def update(self):\n        global Heading\n        self.prevHeading = Heading\n        Heading = self.get_Heading()\n        self.prevTrackerF = self.TrackerF\n        self.TrackerF = self.get_TrackerF()\n        print(self.TrackerF)\n\n\nclass PID_Controller:\n    def __init__(self, Kp, Ki, Kd, target, alpha=0.2, umax=100, umin=.2):\n        self.Kp = Kp\n        self.Ki = Ki\n        self.Kd = Kd\n        self.target = target\n        self.alpha = alpha  # Filtering coefficient for derivative term\n        self.umax = umax # integrator clamp max\n        self.umin = umin # integrator clamp min\n        \n        self.previous_error = 0     #all these are updated but start at zero\n        self.previous_derivative = 0\n        self.integral = 0\n        self.filtered_derivative = 0\n        self.prev_update = time.time()\n        \n    def update(self, Progress, dt):\n        error = self.target - Progress\n        #print(error,\"error\")\n        \n        # Proportional term\n        P = self.Kp * error\n        # Derivative term (unfiltered)\n        if dt != 0:\n            D_unfiltered = (error - self.previous_error) / dt\n        else: \n            D_unfiltered = 1\n        \n        # Apply low-pass filter to the derivative term\n        self.filtered_derivative =low_pass_filter(self.previous_derivative, D_unfiltered, self.alpha)\n        p_d = self.filtered_derivative\n        #self.filtered_derivative = self.alpha * D_unfiltered + (1 - self.alpha) * self.filtered_derivative\n        D = self.Kd * self.filtered_derivative\n        \n        \n        # Clamped Integral term\n        dint_unclamped = error * dt\n        I_unclamped = self.Ki * dint_unclamped\n        if self.umin < abs(P + I_unclamped + D) < self.umax:\n            self.integral += dint_unclamped\n            I = I_unclamped\n        else: I = I_unclamped   \n\n        # Control output\n        U = P + I + D\n        if U > 40:\n            U = 40\n        elif U<-40:\n            U = -40\n        \n        # Update previous \n        self.previous_error = error\n        self.previous_derivative = p_d \n        return U\n\n################################\n#        FUNCS & INITS         #\n################################\nClampActive = False\n\ndef SelectAuton():\n    global Team\n    brain.screen.set_fill_color(Color.RED)\n    brain.screen.draw_rectangle(0, 0, 479, 239)\n    brain.screen.set_fill_color(Color.BLUE)\n    brain.screen.draw_rectangle(240, 0, 479, 239)\n\n    while brain.screen.pressing() == False:\n        if brain.screen.pressing():\n            break\n    \n    if brain.screen.x_position() >=240:\n        Team = \"Blue\"\n        brain.screen.clear_screen()\n        brain.screen.set_font(FontType.MONO60)\n        brain.screen.print(Team)\n    elif brain.screen.x_position() < 240:\n        brain.screen.clear_screen()\n        brain.screen.set_fill_color(Color.RED)\n        brain.screen.set_font(FontType.MONO60)\n        brain.screen.print(Team)\n    return Team\n\ndef Intake():\n    intake.spin(FORWARD)\ndef Outtake():\n    intake.spin(REVERSE) \nWallPosition = 0\ndef wallstake(pos = None):\n    global WallPosition\n    ratio = 4 #gear ratio\n\n\n    marks = [0,34,160,225,160,60] #list of arm positions\n    \n    if pos != None: # for auton\n        Wall.spin_to_position(marks[pos] *ratio ,DEGREES,wait=False)\n        WallPosition = marks[pos]\n\n\n    else:\n        if controller_1.buttonY.pressing():\n            if (Wall.position(DEGREES) / ratio) < marks[1]-10:\n                WallPosition = marks[1]\n            elif marks[1]-10 <= (Wall.position(DEGREES) / ratio) < marks[3]+10:\n                WallPosition = marks[3]\n\n\n        if controller_1.buttonA.pressing():\n            WallPosition = marks[4]\n\n\n        if controller_1.buttonB.pressing():\n            if marks[1]+15 <= Wall.position(DEGREES) / ratio <= marks[3]+10:\n                WallPosition = marks[1]\n            elif Wall.position(DEGREES) / ratio <= marks[1]+15:\n                WallPosition = marks[0]\n                \n        Wall.spin_to_position(WallPosition*ratio,DEGREES,wait=False)\n\n\ndef clamp():\n    Mogo.set(True)\ndef release_clamp():\n    Mogo.set(False)\n\ndef doinkR():\n   global global_doink\n   doinkerR.set(not global_doink[0])\n   global_doink[0] = not global_doink[0]\ndef doinkL():\n   global global_doink\n   doinkerL.set(not global_doink[1])\n   global_doink[1] = not global_doink[1]\n\ndef buzz():\n    controller_1.rumble(\".\")\ncontroller_1.buttonL2.pressed(buzz())\n\nManager = Sensor_Manager()\n\ndef head(dist, P=1.8, I=0.4, D=0.7, deadzone = .7):\n    Control = PID_Controller(P, I, D, dist + Manager.TrackerF)\n    while True:\n        Manager.update()\n        print(\"tracker\",Manager.TrackerF)\n        drivetrain.set_drive_velocity(Control.update(Manager.TrackerF, time.time()-Control.prev_update), PERCENT)\n        if Control.target -deadzone < Manager.TrackerF < Control.target +deadzone and -10 < POD.velocity(DPS) < 10:\n            drivetrain.set_drive_velocity(0, PERCENT)\n            del Control\n            break\ndef circ(angl, P=.2 , I=.03, D=.5, deadzone = 1):\n    global Heading\n    if Team == \"Blue\":\n        angl *= -1\n    Control = PID_Controller(P, I, D, angl)\n    while True:\n        Manager.update()\n        drivetrain.set_turn_velocity(Control.update(Heading, time.time()-Control.prev_update), PERCENT)\n        if Control.target -deadzone < Heading < Control.target + deadzone and -7 < POD.velocity(DPS)< 7:\n            drivetrain.set_turn_velocity(0, PERCENT)\n            del Control\n            break\n\n################################\n#         TYPE SHOT BRO        #\n################################\n\ndef TestAuton():\n    doinkR()\n\ndef TwoRing():\n   #Drive back 35 inches to clamp stake\n   release_clamp()\n   head(-28, 1.6, .4, .3)\n\n\n   clamp()\n   wait(.5,SECONDS)\n   intake.spin(FORWARD)\n   wait(.2,SECONDS)\n\n\n   #turn towards first stack\n   circ(-90)\n   #Drive 25 and intake\n   head(24, 2, .4, .3, .5)\n  \n   intake.stop()\n   #turn to tower\n   circ(-220)\n\n\n   wallstake(2)\n   head(20)\n\ndef FourRing():\n    #Drive back 28 inches to clamp stake\n    release_clamp()\n    head(-28, 1.8, .4, 1)\n\n    clamp()\n    wait(.2,SECONDS)\n    flex.spin(FORWARD)\n    hooks.spin(FORWARD)\n    wait(.2,SECONDS)\n\n    #turn towards first stack\n    circ(137)\n    #Drive 25 and intake\n    head(21, 1.5, .4, 0, 1)\n    head(-.8,1.6,.4,.3,1)\n    \n    #turn to second stack\n    circ(40)\n    #ring2\n    head(14.5, 2, .4, .5)\n    #ring3\n    circ(158)\n    head(10)\n\n    head(-10)\n    circ(260,.4,0,.5)\n    wallstake(2)\n    head(30)\n    intake.stop()\n    drivetrain.set_drive_velocity(0,PERCENT)\n\ndef EightPoint():\n    #alliance\n    wallstake(1)\n    wait(.3,SECONDS)\n    intake.spin(FORWARD)\n    wait(.3,SECONDS)\n    intake.stop()\n    wallstake(4)\n    wait(.8,SECONDS)\n    head(8)\n\n    #next\n    head(-8,2)\n    wallstake(0)\n    circ(15)\n    release_clamp()\n    intake.spin(REVERSE)\n    head(-38)\n    clamp()\n    wait(.1,SECONDS)\n\n    circ(140)\n    intake.spin(FORWARD)\n    head(17)\n    circ(133)\n    head(4)\n\n    head(-10)\n    circ(90)\n    head(15)\n    circ(108)\n    intake.stop()\n    wallstake(5)\n    head(-35,2)\n\ndef GoalRush():\n    #Rush\n    flex.spin(FORWARD)\n    head(37,2.3,.4,.07,1)\n    if Team == \"BLUE\":\n        doinkerR.set(True)\n    elif Team == \"RED\":\n        doinkerR.set(True)\n    wait(.3,SECONDS)\n    flex.stop\n\n    #next goal\n    head(-20,.5,.4,.07,.7)\n    if Team == \"BLUE\":\n        doinkerR.set(False)\n    elif Team == \"RED\":\n        doinkerR.set(False)\n    wait(.4,SECONDS)\n    circ(112+20)\n    release_clamp()\n    head(-30)\n    clamp()\n    wait(.2,SECONDS)\n    circ(-30,.4)\n    wait(.2,SECONDS)\n    intake.spin(FORWARD)\n    wait(1,SECONDS)\n\n\n    #go to tower\n    wallstake(2)\n    head(12)\n    intake.stop()\n\ndef RingRush():\n    pass\n\ndef Skills():\n    #Drive back 35 inches to clamp stake\n    wallstake(2)\n    wait(.5,SECONDS)\n    wallstake(1)\n    wait(.1,SECONDS)\n    wallstake(0)\n    head(-10)\n    circ(-90)\n    head(-17)\n    clamp()\n    wait(.5,SECONDS)\n\n\n    #2 rings\n    circ(90,.08)\n    intake.spin(FORWARD)\n    head(42,.4)\n    head(-5)\n    wait(1,SECONDS)\n    circ(205)\n    head(-10)\n    intake.spin_for(REVERSE,15,DEGREES)\n    release_clamp()\n    intake.stop()\n    wait(.1,SECONDS)\n\n\n    #second stake\n    head(10)\n    circ(93,.08,.04,.1)\n    head(-80,.5)\n    clamp()\n    wait(.5,SECONDS)\n    circ(-90)\n    \n    #2 rings\n    intake.spin(FORWARD)\n    head(30,.4)\n    head(-5)\n    circ(-215)\n    head(-10)\n    intake.spin_for(REVERSE,15,DEGREES)\n    release_clamp()\n    intake.stop()\n    wait(.1,SECONDS)\n    head(5)\n\n'''def PathSelection():\n    Count = 0\n    while brain.screen.pressing() == False:\n            if brain.screen.pressing():\n                break\n        if brain.screen.x_position() >=370:\n            Count += 1\n            brain.screen.set_font(FontType.MONO60)\n            brain.screen.set_cursor(1,1)\n\n            brain.screen.print(Team)'''\n\n\n\n################################\n#         CONTROL LOOP         #\n################################\n\nTeam = SelectAuton()\nIMU.calibrate()\nwait(.3,SECONDS)\ndrivetrain.set_drive_velocity(0,PERCENT)\ndrivetrain.set_turn_velocity(0,PERCENT)\nWall.set_velocity(100, PERCENT)\nWall.set_stopping(HOLD)\nhooks.set_velocity(85,PERCENT)\nhooks.set_stopping(BRAKE)\nflex.set_velocity(100,PERCENT)\nintake.set_velocity(100,PERCENT)\nPOD.set_position(0,DEGREES)\n\n\ndef driver_control():\n    drivetrain.set_drive_velocity(100, PERCENT)\n    driving = True\n    print(driving)\n    controller_1.buttonX.pressed(doinkR)\n    controller_1.buttonUp.pressed(doinkL)\n    while True:\n        if controller_1.buttonL1.pressing():\n            flex.spin(FORWARD)\n        elif controller_1.buttonL2.pressing():\n            flex.spin(REVERSE)\n        else: flex.stop()\n        if controller_1.buttonR1.pressing():\n            hooks.spin(FORWARD)\n        elif controller_1.buttonR2.pressing():\n            hooks.spin(REVERSE)\n        else: hooks.stop()\n\n\n        if controller_1.buttonRight.pressing():\n            release_clamp()\n        elif controller_1.buttonDown.pressing():\n            clamp()\n\n\n        wallstake()\n\n        \n\n\ndef autonomous():\n    drivetrain.set_drive_velocity(0, PERCENT)\n    drivetrain.set_turn_velocity(0, PERCENT)\n    \n    intake.set_velocity(85,PERCENT)\n    \n    drivetrain.drive(FORWARD)\n    drivetrain.turn(RIGHT)\n\n    FourRing()\n\n\n    ############################################################################\n\n    \n\ncompetition = Competition(driver_control, autonomous)\n\n\n################################\n#            _SAVES            #\n################################\n\n","textLanguage":"python","robotConfig":[{"port":[],"name":"controller_1","customName":false,"deviceType":"Controller","deviceClass":"controller","setting":{"left":"","leftDir":"false","right":"","rightDir":"false","upDown":"","upDownDir":"false","xB":"","xBDir":"false","drive":"split","id":"primary"},"triportSourcePort":22},{"port":[2],"name":"intake","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio18_1","id":"partner"},"triportSourcePort":22},{"port":[1],"name":"Mogo","customName":true,"deviceType":"DigitalOut","deviceClass":"digital_out","setting":{"id":"partner"},"triportSourcePort":22},{"port":[2],"name":"doinker","customName":true,"deviceType":"DigitalOut","deviceClass":"digital_out","setting":{"id":"partner"},"triportSourcePort":22},{"port":[1],"name":"Wall","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio18_1","id":"partner"},"triportSourcePort":22},{"port":[18],"name":"L3","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio6_1"},"triportSourcePort":22},{"port":[8],"name":"R3","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio6_1"},"triportSourcePort":22},{"port":[20,19,10,9,0],"name":"drivetrain","customName":false,"deviceType":"Drivetrain","deviceClass":"smartdrive","setting":{"type":"4-motor","wheelSize":"wheel325in","gear":"ratio6_1","gearRatio":"36:60","direction":"fwd","gyroType":"none","width":"295","unit":"mm","wheelbase":"40","wheelbaseUnit":"mm","xOffset":"0","xOffsetUnit":"mm","yOffset":"0","yOffsetUnit":"mm","thetaOffset":"180"},"triportSourcePort":null}],"slot":1,"platform":"V5","sdkVersion":"20240802.15.00.00","appVersion":"4.0.7","fileFormat":"2.0.0","targetBrainGen":"First","v5Sounds":[{"name":"game over","url":"static/sounds/mixkit-arcade-retro-game-over-213.wav"}],"v5SoundsEnabled":false}